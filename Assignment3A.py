"""This is a python program where we are loading the dataset using sklearn dataset library. Then we split those data in training and testing data for each run after which we pass these data to Gaussian Naïve Bayes Classifier to label this data. Lastly, we return the results of how well the Classifier performed by printing number of mislabeled points, average number of correct and incorrect predictions/probabilities to label the testing data

Source for the data set : http://archive.ics.uci.edu/ml/datasets/Breast+Cancer+Wisconsin+%28Diagnostic%29

Prerak Patel, Student, Mohawk College, 2020
"""

from sklearn import datasets
from sklearn.naive_bayes import GaussianNB
import numpy as np

## DECLARE FUNCTIONS

# function to create shuffled data set and using first 80% of data set for training and remaining 20% for testing data
def createDataSet(data_set,labels):

    # getting the index array after sorting the names array alphabatically.
    sortSequence = np.random.permutation(len(data_set))

    data_set = data_set[sortSequence]
    labels = labels[sortSequence]

    # using the first 80% of the data set into training data
    train_data = data_set[:int(len(data_set)*0.8)]
    train_labels = labels[:int(len(labels)*0.8)]

    # using the other 20% of the data set into testing data
    test_data = data_set[int(len(data_set)*0.8):]
    test_labels = labels[int(len(labels)*0.8):]

    return train_data, train_labels, test_data, test_labels

## CREATE and TRAIN a Gaussian Naïve Bayes Classifier
def gaussianNB(train_data, train_labels, test_data, test_labels):

    # Created Gaussian Naïve Bayes Classifier
    gnb = GaussianNB()
    # Passing training data to Gaussian Naïve Bayes Classifier
    gnb.fit(train_data, train_labels)

    # Test the Classifier
    y_pred = gnb.predict(test_data)
    # Calculating number of mislabeled points in the array
    mislabeled_points = (test_labels != y_pred).sum()

    # Probabilities generated by the classifier to get a sense of its confidence in its answers
    probs = gnb.predict_proba(test_data).max(axis=1)

    # Computing the array for the correct and incorrect prediction by the Classifier
    correct_predictions = probs[test_labels == y_pred]
    incorrect_predictions = probs[test_labels != y_pred]

    # returning the number of mislabled points, mean value of the correct and incorrect predictions/probabilities for this run
    return mislabeled_points, correct_predictions.mean(), incorrect_predictions.mean()

## LOAD A DATA SET
dataset = datasets.load_breast_cancer()

# Declaring the arrays for the mislabeled points, correct predictions and incorrect predictions
mislabeled_points_array = []
correct_predictions_array = []
incorrect_predictions_array = []

# Set the number of the runs
frequency = 500

## Looping through each run to create different data set for training and testing and passing it Gaussian Naïve Bayes Classifier
for eachRun in range(frequency):

    # Storing the new dataset for the training and testing for each run
    train_data, train_labels, test_data, test_labels = createDataSet(dataset.data,dataset.target)

    # Passing data to Gaussian Naïve Bayes Classifier to return mislabel points, mean value of the correct and incorrect predictions/probabilities for this run
    mislabeled_points, correct_predictions_mean, incorrect_predictions_mean = gaussianNB(train_data, train_labels, test_data, test_labels)

    # Appending the values to the respected arrays
    mislabeled_points_array.append(mislabeled_points)
    correct_predictions_array.append(correct_predictions_mean)
    incorrect_predictions_array.append(incorrect_predictions_mean)

## Compute average probability score for correct and incorrect predictions.
mislabeled_points_array = np.array(mislabeled_points_array)
correct_predictions_array = np.array(correct_predictions_array)
incorrect_predictions_array = np.array(incorrect_predictions_array)

## PRINTING IT
# Average number of mislabeled points
print("Total number of runs are " + str(frequency) + "\nAverage number of mislabeled points out of a total " + str(test_data.shape[0]) + " points: " + str(np.around(mislabeled_points_array.mean(),decimals=2)))

# Average number of correct predictions
print("Average probability score for correct predictions: " + str(np.around(correct_predictions_array.mean(),decimals=2)))
# Average number of incorrect predictions
print("Average probability score for incorrect predictions: " + str(np.around(incorrect_predictions_array.mean(),decimals=2)))
print("Gaussian Naïve Bayes Classifier was correct " + str(np.around(((test_data.shape[0] - mislabeled_points_array.mean())*100)/test_data.shape[0],decimals = 2)) + "%")





